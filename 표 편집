import Foundation

struct Node {
    let value: Int
    var prev: Int
    var next: Int
    var isOnTable = true
    
    init(_ prev: Int, _ value: Int, _ next: Int) {
        self.prev = prev
        self.value = value
        self.next = next
    }
}
var table = [Node]()
var st = [Int]()
var cur = 0

func cmd_U(_ n: Int) {
    for _ in 0..<n {
       cur = table[cur].prev 
    }
}

func cmd_D(_ n: Int) {
    for _ in 0..<n {
       cur = table[cur].next 
    }
} 

func cmd_C() {
    let prev = table[cur].prev
    let next = table[cur].next
    if prev != -1 { table[prev].next = next }
    if next != -1 { table[next].prev = prev }
    table[cur].isOnTable = false
    st.append(cur)
    cur = table[cur].next == -1 ? prev : next
}

func cmd_Z() {
    let removed = st.removeLast()
    table[removed].isOnTable = true
    let prev = table[removed].prev
    let next = table[removed].next
    if prev != -1 { table[prev].next = removed }
    if next != -1 { table[next].prev = removed }
}


func solution(_ n:Int, _ k:Int, _ cmds:[String]) -> String {
    //
    for i in 0..<n {
        if i == n - 1 {
            table.append(Node(i - 1, i, -1 ))
        } else {
            table.append(Node(i - 1, i, i + 1 ))
        }
    }
    cur = k
    for cmd in cmds {
        if cmd.first! == "U" {
            let arr = cmd.split(separator: " ")
            cmd_U(Int(String(arr.last!))!)
        } else if cmd.first! == "D" {
            let arr = cmd.split(separator: " ")
            cmd_D(Int(String(arr.last!))!)
        } else if cmd.first! == "C" {
            cmd_C()
        } else { // Z
            cmd_Z()
        }
    }
    
    var ans = ""
    for node in table {
        if node.isOnTable { ans.insert("O", at: ans.endIndex)}
        else { ans.insert("X", at: ans.endIndex)}
    }
    return ans
}
