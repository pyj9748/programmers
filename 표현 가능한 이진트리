import Foundation
var ans = [Int]()
func solution(_ numbers:[Int64]) -> [Int] {
    
    for number in numbers {
        var n: Int64 = 1
        var a: Int64 = 1
        while a < number {
            n = (2 * n) + 1
            var temp: Int64 = 1
            for _ in 0..<n {
                temp *= 2
            }
            a = temp - 1
        }
        let str1 = String(a, radix: 2)
        let str2 = String(number, radix: 2)
        let diff = str1.count - str2.count 

        if str2 == "1" {
            ans.append(1)
            continue
        }
        if str2 == "0" {
            ans.append(0)
            continue
        }
        let r = recur(Array(repeating: "0", count: diff) + Array(str2))
        if r == 0 { ans.append(1) }
        else { ans.append(0) }
    }
    return ans
}
func recur(_ str: [Character]) -> Int64 { 
    var leftSt = 0
    var mid = str.count / 2
    var leftEnd = mid - 1
    var rightSt = mid + 1
    var rightEnd = str.count - 1
    var st = [[Int]]()
    st.append([(leftSt + leftEnd) / 2, mid ,(rightSt + rightEnd) / 2])
    //print(str)
    var _top = [Int]()
    var _le = 0
    var _mid = 0
    var _ri = 0
    while !st.isEmpty {
        //print(st)
        _top = st.removeLast()
        _le = _top[0]
        _mid = _top[1]
        _ri = _top[2]
        //print(le, mid, ri)
        if str[_mid] == "0" {
            if str[_le] == "1" || str[_ri] == "1" {
                return 1
            }
        }
        if _le + 1 != _mid && _mid + 1 != _ri {
            // left
            let span = (_mid - _le) / 2 
            // right
            st.append([_ri - span, _ri, _ri + span])
            st.append([_le - span, _le, _le + span])
        }
    }
    return 0
}

