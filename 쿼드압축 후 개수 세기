import Foundation

var grid: [[Int]] = []
func solution(_ arr:[[Int]]) -> [Int] {
    grid = arr
    
    return f([0,0], [grid.count - 1, grid.count - 1])
}

func f(_ from: [Int], _ to: [Int] ) -> [Int] {
    let n = (to[0] - from[0] + 1) / 2
    if n == 1 {
        var zero = 0
        var one = 0
        for i in from[0]...(from[0] + 1) {
            for j in from[1]...(from[1] + 1) {
                if grid[i][j] == 0 { zero += 1 }
                else { one += 1 }
            }
        }
        if zero == 4 {
            return [1, 0]    
        } else if zero == 0 {
            return [0, 1]
        } else {
            return [zero, one]
        }
    }
   
    // 1
    let t1 = f(from, [from[0] + (n - 1), from[1] + (n - 1)])
    // 2
    let t2 = f([from[0], from[1] + n], [from[0] + (n - 1) , to[1]])
    // 3
    let t3 = f([from[0] + n, from[1]], [to[0], from[1] + (n - 1)])
    // 4
    let t4 = f([from[0] + n, from[1] + n], to)
    var zero = 0
    var one = 0
    for t in [t1, t2, t3, t4] {
        zero += t[0]
        one += t[1]
    }
    if zero == 4 && one == 0 {
        return [1, 0]    
    } else if zero == 0 && one == 4 {
        return [0, 1]
    } else {
        return [zero, one]
    }
}
